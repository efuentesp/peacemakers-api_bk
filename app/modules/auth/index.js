// Generated by CoffeeScript 1.6.3
var User, jwt, mongoose, passport;

passport = require("passport");

mongoose = require('mongoose');

jwt = require('jwt-simple');

User = mongoose.model('User');

module.exports = function(app, config) {
  var auth;
  auth = passport.authenticate('basic', {
    session: false
  });
  return app.get('/api/auth', auth, function(req, res) {
    var authorization, credentials, index, parts, password, scheme, username;
    authorization = req.headers.authorization;
    if (!authorization) {
      console.log("HTTP: Authorization not found!");
      res.statusCode = 400;
      return res.send("Error 400: HTTP: Authorization not found!");
    }
    parts = authorization.split(' ');
    scheme = parts[0];
    credentials = new Buffer(parts[1], 'base64').toString();
    index = credentials.indexOf(':');
    if (scheme === !'Basic' || index < 0) {
      console.log("Not Basic Authorization!");
      res.statusCode = 400;
      return res.send("Error 400: HTTP: Not Basic Authorization!");
    }
    username = credentials.slice(0, index);
    password = credentials.slice(index + 1);
    return User.findOne({
      username: username
    }, function(err, user) {
      var payload, token;
      if (err) {
        return console.log(err);
      }
      if (user) {
        payload = {
          username: user.username,
          expires: Math.round(new Date().getTime() / 1000) + 3600
        };
        token = jwt.encode(payload, config.secret);
        user.authToken = token;
        return user.save(function(err) {
          if (err) {
            console.log(err);
            res.statusCode = 500;
            return res.send("Error 500: Internal Server Error found!");
          }
          console.log("updated");
          return user.getPermissions(function(err, permissions) {
            if (err) {
              console.log(err);
              res.statusCode = 500;
              return res.send("Error 500: Internal Server Error found!");
            }
            return res.send({
              token: token,
              auth: permissions
            });
          });
        });
      } else {
        console.log("Resource not found!");
        res.statusCode = 400;
        return res.send("Error 400: Resource not found!");
      }
    });
  });
};
